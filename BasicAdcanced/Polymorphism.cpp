/*
多态Wiki 
------------------------------------------------------------------------------------------------
1. 分类
 - 静态多态：函数重载、运算符重载，复用函数名  
    > 函数地址早绑定，编译阶段确定函数地址 
 - 动态多态：派生类和虚函数实现运行时多态  
    > 函数地址晚绑定，运行阶段确定函数地址 

2. 静态多态和运行时多态是两种不同的多态形式，它们的主要区别在于方法的调用时机和实现方式。
 - 静态多态也称为编译时多态或提前多态，其方法调用在编译时就已经确定了，并且只能通过方法的重载来实现。在编译时，编译器会根据传入的参数类型、个数等信息来决定调用哪个方法。静态多态的实现原理是方法的重载，即根据参数的类型和数量来决定调用哪个方法。

 - 运行时多态也称为动态多态或延迟多态，其方法调用在运行时才确定，并且只能通过方法的重写来实现。在运行时，根据实际对象的类型来决定调用哪个方法。运行时多态的实现原理是方法的重写，即在继承关系中，子类重写父类的方法，当方法调用通过父类的引用传递时，实际执行的是子类重写后的方法。

因此，静态多态和运行时多态的主要区别在于方法的调用时机和实现方式。静态多态在编译时就已经确定了方法的调用，而运行时多态在运行时才确定方法的调用；静态多态只能通过方法的重载来实现，而运行时多态只能通过方法的重写来实现。

3. runtime运行时 
 - 运行时是指程序在运行时才会被加载，而编译时是指程序在编译时就已经被加载。 
 - 编译时：编译器在编译时就已经确定了程序的执行流程，因此编译时是静态的，而运行时是动态的。  

4. 多态优点 
 - 代码组织结构清晰 
 - 可读性强 
 - 利于前期和后期的扩展与维护 

5. 多态满足条件
 - 存在继承关系 
 - 子类重写父类中的虚函数 

6. 多态使用条件
 - 父类指针或者引用指向子类对象 (C++核心编程P69)
------------------------------------------------------------------------------------------------
*/

#include <iostream>  
