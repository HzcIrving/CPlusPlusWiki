/*内联函数 

int max(int a, int b)
{
    return a > b ? a : b;
}

1. 调用函数比求解等价表达式要慢得多 
2. 在大多数的机器上，调用函数都要做很多工作：调用前要先保存寄存器，并在返回时恢复，复制实参，程序还必须转向一个新位置执行。
3. C++中可以使用内联函数，其目的是为了提高函数的执行效率，通常与类一起使用。
4. 如果一个函数是内联的，那么在编译时，编译器会把该函数的代码副本放置在每个调用该函数的地方。
5. 对内联函数进行任何修改，都需要重新编译函数的所有客户端，因为编译器需要重新更换一次所有的代码，否则将会继续使用旧的函数。 
6. 如果想把一个函数定义为内联函数，则需要在函数名前面放置关键字 inline，在调用函数之前需要对函数进行定义。
7. 如果已定义的函数多于一行，编译器会忽略 inline 限定符。 
8. 在类定义中的定义的函数都是内联函数，即使没有使用 inline 说明符。
9. 内敛函数的特点：
    1. 有了内联函数，就能像调用一个函数那样方便地重复使用一段代码，而不需要付出执行函数调用的额外开销。 
    2. 使用内联函数会是最终可执行程序的体积增加。以空间换取时间 
    3. 内联函数中的代码应该只是很简单、执行很快的几条语句。
       如果一个函数较为复杂，它执行的时间可能上万倍于函数调用的额外开销，那么将其作为内联函数处理的结果是付出让代码体积增加不少的代价，却只使速度提高了万分之一，这显然是不划算的，而且有些函数即使声明为内联的也不一定会被编译器内联。 
    4. 有时函数看上去很简单，例如只有一个包含一两条语句的循环，但该循环的执行次数可能很多，要消耗大量时间，那么这种情况也不适合将其实现
       为内联函数。
10. 另外需要注意的是，调用内联函数的语句前必须已经出现内联函数的定义（即【整个函数体】），而不能只出现内联函数的【声明】。
*/ 

#include <iostream> 
using namespace std; 

inline int Max(int x, int y){
    return (x>y) ? x:y; 
}

// 主程序
int main(){ 
   cout << "Max (20,10): " << Max(20,10) << endl;
   cout << "Max (0,200): " << Max(0,200) << endl;
   cout << "Max (100,1010): " << Max(100,1010) << endl;
   return 0;
}